package std/collections.array

import std/lang.unsafe { array as unsafeArray }
//import std/collections.set { Set }

pub fn arrayOf[T](): array[T] {
    unsafeArray[T](0)
}

pub fn arrayOf[T](e1: T): array[T] {
    array(1, e1)
}

pub fn arrayOf[T](e1: T, e2: T): array[T] {
    val arr = array(2, e1)
    arr[1] = e2 
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T): array[T] {
    val arr = array(3, e1)
    arr[1] = e2 
    arr[2] = e3
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T): array[T] {
    val arr = array(4, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T): array[T] {
    val arr = array(5, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T): array[T] {
    val arr = array(6, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T): array[T] {
    val arr = array(7, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr
}


pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T): array[T] {
    val arr = array(8, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T): array[T] {
    val arr = array(9, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr[8] = e9
    arr
}


pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T): array[T] {
    val arr = array(10, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr[8] = e9
    arr[9] = e10
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T, e11: T): array[T] {
    val arr = array(11, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr[8] = e9
    arr[9] = e10
    arr[10] = e11
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T, e11: T, e12:T, e13:T, e14:T, e15:T, e16:T): array[T] {
    val arr = array(16, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr[8] = e9
    arr[9] = e10
    arr[10] = e11
    arr[11] = e12
    arr[12] = e13
    arr[13] = e14
    arr[14] = e15
    arr[15] = e16
    arr
}


pub fn map[T, R](arr: array[T], f: (T) -> R): array[R] {
    val arrSize = size(arr)
    val result = unsafeArray[R](arrSize)
    var index = 0
    while(index < arrSize) {
        val element = arr[index]
        val tmp = f(element)
        result[index] = tmp
        index = index + 1
    }
    result
}

pub fn forEach[T](arr: array[T], f: (T) -> unit): unit {
    val arrSize = size(arr)
    var index = 0
    while(index < arrSize) {
        val element = arr[index]
        f(element)
        index = index + 1
    }
}

pub fn fold[T, R](arr: array[T], initialValue: R, f: (R, T) -> R): R {
    var arrSize = size(arr)
    var index = 0
    var acc = initialValue
    while(index < arrSize) {
        val element = arr[index]
        acc = f(acc, element)
        index = index + 1
    }
    acc
}

pub fn sum(arr: array[int]): int {
    var sum = 0
    var arrSize = size(arr)
    var index = 0
    while(index < arrSize) {
        sum = sum + arr[index]
        index = index + 1
    }
    sum
}

pub fn swapInPlace[T](arr: array[T], index1: int, index2: int): array[T] {
    val tmp = arr[index1]
    arr[index1] = (arr[index2])
    arr[index2] = tmp
    arr
}

pub fn clone[T](arr: array[T]): array[T] {
    arr.map({ it: T -> it })
}

// This needs set to be loaded first!
//pub fn toSet[T](arr: array[T]): Set[T] {
//    var s = setOf[T]()
//    arr.forEach({ t: T ->
//        s = s.add(t)
//    })
//    s
//}

pub fn asInts(input: array[string]): array[int] {
    input.map({ it: string -> it as int })
}
