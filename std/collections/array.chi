package std/collections.array

fn removeLast[T](arr: array[T]): T {
    val idx = arr.size() - 1
    val result = arr[idx]
    arr.removeAt(idx)
    result
}

fn push[T](stack: array[T], value: T) {
    stack.add(value)
}

fn pop[T](stack: array[T]): T {
    stack.removeLast()
}

pub fn any[T](arr: array[T], f: (T) -> bool): bool {
    var result = false
    var i = 0
    while (i < arr.size()) {
        result = result || f(arr[i])
        i += 1
    }
    result
}

pub fn all[T](arr: array[T], f: (T) -> bool): bool {
    var result = true
    var i = 0
    while (i < arr.size()) {
        result = result && f(arr[i])
        i += 1
    }
    result
}

pub fn first[T](arr: array[T]): Option[T] {
    if (arr.size() > 0) {
        Just(arr[0])
    } else {
        Nothing
    }
}

pub fn last[T](arr: array[T]): Option[T] {
    val size = arr.size()
    if (size > 0) {
        Just(arr[arr.size()-1])
    } else {
        Nothing
    }
}

pub fn reverse[T](arr: array[T]): array[T] {
    val size = arr.size()
    if (size == 0) {
        arr
    } else {
        val el = arr[0]
        val result = array(arr.size(), el)
        var i = 0
        while (i < size) {
            result[i] = (arr[size - i - 1])
            i += 1
        }
        result
    }
}

pub fn sort[T](arr: array[T], cmp: (T,T) -> int) {
    quicksort(arr, cmp, 0, arr.size()-1)
}

fn quicksort[T](arr: array[T], cmp: (T, T) -> int, from: int, to: int) {
    if (from >= 0 && to >= 0 && from < to) {
        val p = partition(arr, cmp, from, to)
        quicksort(arr, cmp, from, p)
        quicksort(arr, cmp, p + 1, to)
    }
}

fn partition[T](arr: array[T], cmp: (T,T) -> int, from: int, to: int): int {
    val pivotIndex = ((to-from) / 2) + from
    val pivot: T = arr[pivotIndex]

    var i = from - 1
    var j = to + 1

    var result = 0
    while (true) {
        i += 1
        while (cmp(arr[i], pivot) < 0) {
            i += 1
        }

        j -= 1
        while (cmp(arr[j], pivot) > 0) {
            j -= 1
        }

        if (i >= j) {
            result = j
            break
        }

        val tmp: T = arr[i]
        arr[i] = (arr[j])
        arr[j] = tmp
    }
    result
}

pub fn arrayOf[T](): array[T] {
    emptyArray[T]()
}

pub fn arrayOf[T](e1: T): array[T] {
    array(1, e1)
}

pub fn arrayOf[T](e1: T, e2: T): array[T] {
    val arr = arrayOf(e1)
    arr.add(e2)
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T): array[T] {
    val arr = arrayOf(e1, e2)
    arr.add(e3)
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T): array[T] {
    val arr = arrayOf(e1, e2, e3)
    arr.add(e4)
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T): array[T] {
    val arr = arrayOf(e1, e2, e3, e4)
    arr.add(e5)
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T): array[T] {
    val arr = arrayOf(e1, e2, e3, e4, e5)
    arr.add(e6)
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T): array[T] {
    val arr = arrayOf(e1, e2, e3, e4, e5, e6)
    arr.add(e7)
    arr
}


pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T): array[T] {
    val arr = arrayOf(e1, e2, e3, e4, e5, e6, e7)
    arr.add(e8)
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T): array[T] {
    val arr = arrayOf(e1, e2, e3, e4, e5, e6, e7, e8)
    arr.add(e9)
    arr
}


pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T): array[T] {
    val arr = arrayOf(e1, e2, e3, e4, e5, e6, e7, e8, e9)
    arr.add(e10)
    arr
}

pub fn map[T, R](arr: array[T], f: (T) -> R): array[R] {
    val arrSize = size(arr)
    val result = emptyArray[R]()
    var index = 0
    while(index < arrSize) {
        val element = arr[index]
        result.add(f(element))
        index = index + 1
    }
    result
}

pub fn forEach[T](arr: array[T], f: (T) -> unit): unit {
    val arrSize = size(arr)
    var index = 0
    while(index < arrSize) {
        val element = arr[index]
        f(element)
        index = index + 1
    }
}

pub fn fold[T, R](arr: array[T], initialValue: R, f: (R, T) -> R): R {
    var arrSize = size(arr)
    var index = 0
    var acc = initialValue
    while(index < arrSize) {
        val element = arr[index]
        acc = f(acc, element)
        index = index + 1
    }
    acc
}

pub fn sum(arr: array[int]): int {
    var sum = 0
    var arrSize = size(arr)
    var index = 0
    while(index < arrSize) {
        sum = sum + arr[index]
        index = index + 1
    }
    sum
}

pub fn swap[T](arr: array[T], index1: int, index2: int): array[T] {
    val tmp = arr[index1]
    arr[index1] = (arr[index2])
    arr[index2] = tmp
    arr
}

pub fn clone[T](arr: array[T]): array[T] {
    arr.map({ it: T -> it })
}

// This needs set to be loaded first!
//pub fn toSet[T](arr: array[T]): Set[T] {
//    var s = setOf[T]()
//    arr.forEach({ t: T ->
//        s = s.add(t)
//    })
//    s
//}

pub fn asInts(input: array[string]): array[int] {
    input.map({ it: string -> it as int })
}
