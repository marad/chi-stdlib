package std/collections.array

import std/lang.unsafe { array as unsafeArray }

pub fn arrayOf[T](): array[T] {
    unsafeArray[T](0)
}

pub fn arrayOf[T](e1: T): array[T] {
    array(1, e1)
}

pub fn arrayOf[T](e1: T, e2: T): array[T] {
    val arr = array(2, e1)
    arr[1] = e2 
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T): array[T] {
    val arr = array(3, e1)
    arr[1] = e2 
    arr[2] = e3
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T): array[T] {
    val arr = array(4, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T): array[T] {
    val arr = array(5, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T): array[T] {
    val arr = array(6, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T): array[T] {
    val arr = array(7, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr
}


pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T): array[T] {
    val arr = array(8, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr
}

pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T): array[T] {
    val arr = array(9, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr[8] = e9
    arr
}


pub fn arrayOf[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T): array[T] {
    val arr = array(10, e1)
    arr[1] = e2 
    arr[2] = e3
    arr[3] = e4
    arr[4] = e5
    arr[5] = e6
    arr[6] = e7
    arr[7] = e8
    arr[8] = e9
    arr[9] = e10
    arr
}

pub fn map[T, R](arr: array[T], f: (T) -> R): array[R] {
    val arrSize = size(arr)
    val result = unsafeArray[R](arrSize)
    var index = 0
    while(index < arrSize) {
        val element = arr[index]
        val tmp = f(element)
        result[index] = tmp
        index = index + 1
    }
    result
}

pub fn forEach[T](arr: array[T], f: (T) -> unit): unit {
    val arrSize = size(arr)
    var index = 0
    while(index < arrSize) {
        val element = arr[index]
        f(element)
        index = index + 1
    }
}

pub fn fold[T, R](arr: array[T], initialValue: R, f: (R, T) -> R): R {
    var arrSize = size(arr)
    var index = 0
    var acc = initialValue
    while(index < arrSize) {
        val element = arr[index]
        acc = f(acc, element)
        index = index + 1
    }
    acc
}