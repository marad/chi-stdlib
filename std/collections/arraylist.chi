package std/collections.arraylist

import std/lang.interop as iop

data pub ArrayList[T](impl: any)

pub fn newArrayList[T](): ArrayList[T] {
    val JavaClass = iop.lookupHostSymbol("java.util.ArrayList")
    ArrayList(iop.newInstance(JavaClass, arrayOf()))
}

pub fn add[T](list: ArrayList[T], el: T): ArrayList[T] {
    iop.invokeMember(list.impl, "add", arrayOf(el))
    list
}

pub fn add[T](list: ArrayList[T], index: int, el: T): ArrayList[T] {
    val args = array[any](2, index)
    args[1] = el
    iop.invokeMember(list.impl, "add", args)
    list
}


pub fn get[T](list: ArrayList[T], index: int): Option[T] {
    val value = iop.invokeMember(list.impl, "get", arrayOf(index))
    if (iop.isNull(value)) {
        Nothing
    } else {
        Just(value)
    }
}

pub fn getOrDefault[T](list: ArrayList[T], index: int, default: T): T {
    val value = iop.invokeMember(list.impl, "get", arrayOf(index))
    if (iop.isNull(value)) {
        default
    } else {
        value as T
    }
}

pub fn unsafeGet[T](list: ArrayList[T], index: int): T {
    iop.invokeMember(list.impl, "get", arrayOf(index)) as T
}

pub fn set[T](list: ArrayList[T], index: int, value: T) {
    var args = array[any](2, index)
    args[1] = value
    iop.invokeMember(list.impl, "set", args)
}

pub fn indexOf[T](list: ArrayList[T], element: T): int {
    var args = array[any](1, element)
    iop.invokeMember(list.impl, "indexOf", args) as int
}

pub fn lastIndexOf[T](list: ArrayList[T], element: T): int {
    var args = array[any](1, element)
    iop.invokeMember(list.impl, "lastIndexOf", args) as int
}

pub fn contains[T](list: ArrayList[T], el: T): bool {
    iop.invokeMember(list.impl, "contains", arrayOf(el)) as bool
}

pub fn isEmpty[T](list: ArrayList[T]): bool {
    iop.invokeMember(list.impl, "isEmpty", arrayOf()) as bool
}

pub fn remove[T](list: ArrayList[T], index: int): ArrayList[T] {
    iop.invokeMember(list.impl, "remove", arrayOf(index))
    list
}

pub fn clear[T](list: ArrayList[T]): ArrayList[T] {
    iop.invokeMember(list.impl, "clear", arrayOf())
    list
}

pub fn size[T](list: ArrayList[T]): int {
    iop.invokeMember(list.impl, "size", arrayOf()) as int
}

pub fn toArray[T](list: ArrayList[T]): array[T] {
    iop.invokeMember(list.impl, "toArray", arrayOf()) as array
}

pub fn map[T,R](arrayList: ArrayList[T], f: (T) -> R): ArrayList[R] {
    var i = 0
    val result = newArrayList[R]()
    while (i < arrayList.size()) {
        result.add(f(arrayList.unsafeGet(i)))
        i += 1
    }
    result
}

pub fn forEach[T](arrayList: ArrayList[T], f: (T) -> unit) {
    var i = 0
    while (i < arrayList.size()) {
        f(arrayList.unsafeGet(i))
        i += 1
    }
}

pub fn any[T](list: ArrayList[T], f: (T) -> bool): bool {
    var result = false
    var i = 0
    while (i < list.size()) {
        result = result || f(list.unsafeGet(i))
        i += 1
    }
    result
}

pub fn all[T](list: ArrayList[T], f: (T) -> bool): bool {
    var result = true
    var i = 0
    while (i < list.size()) {
        result = result && f(list.unsafeGet(i))
        i += 1
    }
    result
}

pub fn sum(list: ArrayList[int]): int {
    var result = 0
    var i = 0
    while (i < list.size()) {
        result += list.unsafeGet(i)
        i += 1
    }
    result
}


pub fn of[T](): ArrayList[T] {
    newArrayList()
}

pub fn of[T](e: T): ArrayList[T] {
    val s = newArrayList()
    s.add(e)
    s
}

pub fn of[T](e1: T, e2: T): ArrayList[T] {
    val s = newArrayList()
    s.add(e1)
    s.add(e2)
    s
}

pub fn of[T](e1: T, e2: T, e3: T): ArrayList[T] {
    val s = newArrayList()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T): ArrayList[T] {
    val s = newArrayList()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s.add(e4)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T): ArrayList[T] {
    val s = newArrayList()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s.add(e4)
    s.add(e5)
    s

}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T): ArrayList[T] {
    val s = newArrayList()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s.add(e4)
    s.add(e5)
    s.add(e6)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T): ArrayList[T] {
    val s = of(e1, e2, e3, e4, e5, e6)
    s.add(e7)
    s
}


pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T): ArrayList[T] {
    val s = of(e1, e2, e3, e4, e5, e6, e7)
    s.add(e8)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T): ArrayList[T] {
    val s = of(e1, e2, e3, e4, e5, e6, e7, e8)
    s.add(e9)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T): ArrayList[T] {
    val s = of(e1, e2, e3, e4, e5, e6, e7, e8, e9)
    s.add(e10)
    s
}