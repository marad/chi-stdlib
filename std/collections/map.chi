package std/collections.map

import std/lang.interop as iop
import std/collections.arraylist { ArrayList }
import std/lang { load }
//import std/collections.set { Set }

pub fn l() {
    load("chi-stdlib/std/collections/map.chi")
}

data pub Map[K, V](pub impl: any)

pub fn newMap[K, V](): Map[K, V] {
    val HashMap = iop.lookupHostSymbol("java.util.HashMap")
    Map(iop.newInstance(HashMap, arrayOf()))
}

pub fn put[K,V](m: Map[K, V], key: K, el: V) {
    iop.invokeMember(m.impl, "put", arrayOf(key, el))
}

pub fn get[K,V](m: Map[K,V], key: K): Option[V] {
    val v = iop.invokeMember(m.impl, "get", arrayOf(key))
    if (iop.isNull(v)) {
        Nothing
    } else {
        Just(v)
    }
}

pub fn getOrDefault[K,V](m: Map[K,V], key: K, default: V): V {
    val v = iop.invokeMember(m.impl, "get", arrayOf(key))
    if (iop.isNull(v)) {
        default
    } else {
        v as V
    }
}

pub fn remove[K,V](m: Map[K,V], key: K) {
    iop.invokeMember(m.impl, "remove", arrayOf(key))
}

pub fn size[K,V](m: Map[K,V]): int {
    iop.invokeMember(m.impl, "size", arrayOf()) as int
}

pub fn keys[K,V](m: Map[K,V]): array[V] {
    val ks = iop.invokeMember(m.impl, "keySet", arrayOf())
    ArrayList(ks).toArray()
}

pub fn values[K,V](m: Map[K,V]): array[V] {
    val vals = iop.invokeMember(m.impl, "values", arrayOf())
    ArrayList(vals).toArray()
}


pub fn of[K,V](): Map[K,V] {
    newMap[K,V]()
}

pub fn of[K, V](k: K, v: V): Map[K,V] {
    val m = newMap[K,V]()
    m.put(k, v)
    m
}

pub fn of[K, V](k1: K, v1: V, k2: K, v2: V): Map[K,V] {
    val m = newMap[K,V]()
    m.put(k1, v1)
    m.put(k2, v2)
    m
}

pub fn of[K, V](k1: K, v1: V, k2: K, v2: V, k3: K, v3: V): Map[K,V] {
    val m = newMap[K,V]()
    m.put(k1, v1)
    m.put(k2, v2)
    m.put(k3, v3)
    m
}
