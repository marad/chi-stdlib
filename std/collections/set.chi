package std/collections.set

import std/collections.iterator { Iterator }
import std/lang.interop as iop
import std/lang { load }

pub fn l() {
    load("chi-stdlib/std/collections/set.chi")
}

data pub Set[T](impl: any)

pub fn newSet[T](): Set[T] {
    val HashSet = iop.lookupHostSymbol("java.util.HashSet")
    val impl = iop.invokeMember(HashSet, "newHashSet", arrayOf(0))
    Set(impl)
}

pub fn add[T](set: Set[T], t: T) {
    iop.invokeMember(set.impl, "add", arrayOf(t))
}

pub fn remove[T](set: Set[T], t: T) {
    iop.invokeMember(set.impl, "remove", arrayOf(t))
}

pub fn size[T](set: Set[T]): int {
    iop.invokeMember(set.impl, "size", arrayOf()) as int
}

pub fn contains[T](set: Set[T], t: T): bool {
    iop.invokeMember(set.impl, "contains", arrayOf(t)) as bool
}

pub fn toArray[T](set: Set[T]): array[T] {
    iop.invokeMember(set.impl, "toArray", arrayOf()) as array
}

pub fn iterator[T](set: Set[T]): Iterator[T] {
    val iter = iop.invokeMember(set.impl, "iterator", arrayOf())
    Iterator(iter)
}

pub fn clear[T](set: Set[T]) {
    iop.invokeMember(set.impl, "clear", arrayOf())
}

pub fn any[T](set: Set[T], f: (T) -> bool): bool {
    var result = false
    var iter = set.iterator()
    while (iter.hasNext()) {
        result = result || f(iter.next())
    }
    result
}

pub fn all[T](set: Set[T], f: (T) -> bool): bool {
    var result = true
    var iter = set.iterator()
    while (iter.hasNext()) {
        val el = iter.next()
        result = result && f(el)
    }
    result
}

pub fn forEach[T](set: Set[T], f: (T) -> unit) {
    var result = true
    var iter = set.iterator()
    while (iter.hasNext()) {
        f(iter.next())
    }
}

pub fn of[T](): Set[T] {
    newSet()
}

pub fn of[T](e: T): Set[T] {
    val s = newSet()
    s.add(e)
    s
}

pub fn of[T](e1: T, e2: T): Set[T] {
    val s = newSet()
    s.add(e1)
    s.add(e2)
    s
}

pub fn of[T](e1: T, e2: T, e3: T): Set[T] {
    val s = newSet()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T): Set[T] {
    val s = newSet()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s.add(e4)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T): Set[T] {
    val s = newSet()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s.add(e4)
    s.add(e5)
    s

}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T): Set[T] {
    val s = newSet()
    s.add(e1)
    s.add(e2)
    s.add(e3)
    s.add(e4)
    s.add(e5)
    s.add(e6)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T): Set[T] {
    val s = of(e1, e2, e3, e4, e5, e6)
    s.add(e7)
    s
}


pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T): Set[T] {
    val s = of(e1, e2, e3, e4, e5, e6, e7)
    s.add(e8)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T): Set[T] {
    val s = of(e1, e2, e3, e4, e5, e6, e7, e8)
    s.add(e9)
    s
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T): Set[T] {
    val s = of(e1, e2, e3, e4, e5, e6, e7, e8, e9)
    s.add(e10)
    s
}

