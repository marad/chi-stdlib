package std/collections.vector

import std/lang.interop as iop
import std/lang { load }

pub fn l() {
    load("chi-stdlib/std/collections/vector.chi")
}

// TODO: fold, flatMap, reduce

data Vector[T] = Vector(inst: any)
val JVector = iop.lookupHostSymbol("org.pcollections.TreePVector")

pub fn empty[T](): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "empty", array(0,0)))
}

pub fn singleton[T](element: T): Vector[T] {
    val args = array[any](1,0)
    args[0] = element
    Vector(iop.invokeMember(JVector, "singleton", args))
}

pub fn of[T](): Vector[T] {
    empty[T]()
}

pub fn of[T](e1: T): Vector[T] {
    singleton(e1)
}

pub fn of[T](e1: T, e2: T): Vector[T] {
    of(e1).add(e2)
}


pub fn of[T](e1: T, e2: T, e3: T): Vector[T] {
    of(e1, e2).add(e3)
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T): Vector[T] {
    of(e1, e2, e3).add(e4)
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T): Vector[T] {
    of(e1, e2, e3, e4).add(e5)
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T): Vector[T] {
    of(e1, e2, e3, e4, e5).add(e6)
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T): Vector[T] {
    of(e1, e2, e3, e4, e5, e6).add(e7)
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T): Vector[T] {
    of(e1, e2, e3, e4, e5, e6, e7).add(e8)
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T): Vector[T] {
    of(e1, e2, e3, e4, e5, e6, e7, e8).add(e9)
}

pub fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T): Vector[T] {
    of(e1, e2, e3, e4, e5, e6, e7, e8, e9).add(e10)
}

pub fn generate[T](initialValue: T, limit: int, nextValue: (T) -> T): Vector[T] {
    var index: int = 0
    var vector = vectorOf(initialValue)
    var lastValue = initialValue
    while (index < limit) {
        lastValue = nextValue(lastValue)
        vector = vector.add(lastValue)
        index = index + 1
    }
    vector
}

// TODO: fix lambda argument passing
// pub fn range(start: int, step: int, end: int): Vector[int] {
//     var nextItem = start
//     val rangeGen = pub fn(): int {
//         val result = nextItem
//         nextItem = nextItem + step
//         result
//     }
//     val limit = (end-start) / step
//     generate(rangeGen, limit)
// }

pub fn contains[T](self: Vector[T], element: T): bool {
    iop.invokeMember(self.inst, "contains", arrayOf(element)) as bool
}

pub fn add[T](self: Vector[T], element: T): Vector[T] {
    Vector(iop.invokeMember(self.inst, "plus", arrayOf(element)))
}

pub fn remove[T](self: Vector[T], element: T): Vector[T] {
    Vector(iop.invokeMember(self.inst, "minus", arrayOf(element)))
}

pub fn removeAt[T](self: Vector[T], index: int): Vector[T] {
    Vector(iop.invokeMember(self.inst, "minus", arrayOf(index)))
}

pub fn insertAt[T](self: Vector[T], index: int, element: T): Vector[T] {
    val args = array[any](2,0)
    args[0] = index
    args[1] = element
    Vector(iop.invokeMember(self.inst, "plus", args))
}

pub fn size[T](self: Vector[T]): int {
    iop.invokeMember(self.inst, "size", array(0,0)) as int
}

pub fn get[T](self: Vector[T], index: int): Option[T] {
    if (index < 0 || index >= self.size()) {
        Nothing
    } else {
        val value = iop.invokeMember(self.inst, "get", arrayOf(index))
        Just(value)
    }
}

pub fn getOrElse[T](self: Vector[T], index: int, alternative: T): T {
    self.getOrElse(index, { alternative })
}

pub fn getOrElse[T](self: Vector[T], index: int, alternative: () -> T): T {
    val opt = self.get(index)
    when {
        opt is Just -> opt.value as T
        else -> alternative()
    }
}

pub fn forEach[T](self: Vector[T], f: (T) -> unit) {
    iop.invokeMember(self.inst, "forEach", arrayOf(f))
}

pub fn fold[T, R](self: Vector[T], initialValue: R, f: (T, R) -> R): R {
    var current = initialValue
    self.forEach({ it: T ->
        current = f(it, current)
    })
    current
}

pub fn map[T, R](self: Vector[T], f: (T) -> R): Vector[R] {
    self.fold(empty[R](), { it: T, acc: Vector[R] ->
        acc.add(f(it))
    })
}

pub fn filter[T](self: Vector[T], f: (T) -> bool): Vector[T] {
    self.fold(empty[T](), { it: T, acc: Vector[T] ->
        if (f(it)) {
            acc.add(it)
        } else {
            acc
        }
    })
}

pub fn filterNot[T](self: Vector[T], f: (T) -> bool): Vector[T] {
    self.filter({ it: T -> !f(it) })
}

pub fn filterJust[T](self: Vector[Option[T]]): Vector[T] {
    self.fold(empty[T](), { it: Option[T], acc: Vector[T] ->
        if (it is Just) {
            acc.add(it.value)
        } else {
            acc
        }
    })
}

pub fn sum(self: Vector[int]): int {
    self.fold(0, { it: int, acc: int -> it + acc })
}