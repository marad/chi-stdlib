package std/collections.vector

import std/lang.interop as iop
import std/lang { load }

fn l() {
    load("chi-stdlib/std/collections/vector.chi")
}

// TODO: fold, flatMap, reduce

data Vector[T] = Vector(inst: any)
val JVector = iop.lookupHostSymbol("cyclops.data.Vector")

fn empty[T](): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "empty", array(0,0)))
}

fn fill[T](element: T, size: int): Vector[T] {
    val args = array[any](2,0)
    args[0] = element
    args[1] = size
    Vector(iop.invokeMember(JVector, "fill", args))
}

fn generate[T](generator: () -> T, limit: int): Vector[T] {
    val args = array[any](2,0)
    args[0] = generator
    args[1] = limit
    Vector(iop.invokeMember(JVector, "generate", args))
}

fn of[T](): Vector[T] {
    empty[T]()
}

fn of[T](e1: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1)))
}

fn of[T](e1: T, e2: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2)))
}


fn of[T](e1: T, e2: T, e3: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3)))
}

fn of[T](e1: T, e2: T, e3: T, e4: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3, e4)))
}

fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3, e4, e5)))
}

fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3, e4, e5, e6)))
}

fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3, e4, e5, e6, e7)))
}

fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3, e4, e5, e6, e7, e8)))
}

fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3, e4, e5, e6, e7, e8, e9)))
}

fn of[T](e1: T, e2: T, e3: T, e4: T, e5: T, e6: T, e7: T, e8: T, e9: T, e10: T): Vector[T] {
    Vector[T](iop.invokeMember(JVector, "of", arrayOf(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10)))
}

// TODO: fix lambda argument passing
// fn range(start: int, step: int, end: int): Vector[int] {
//     var nextItem = start
//     val rangeGen = fn(): int {
//         val result = nextItem
//         nextItem = nextItem + step
//         result
//     }
//     val limit = (end-start) / step
//     generate(rangeGen, limit)
// }

fn contains[T](self: Vector[T], element: T): bool {
    iop.invokeMember(self.inst, "containsValue", arrayOf(element)) as bool
}

fn add[T](self: Vector[T], element: T): Vector[T] {
    Vector(iop.invokeMember(self.inst, "plus", arrayOf(element)))
}

fn remove[T](self: Vector[T], element: T): Vector[T] {
    Vector(iop.invokeMember(self.inst, "removeValue", arrayOf(element)))
}

fn removeAt[T](self: Vector[T], index: int): Vector[T] {
    Vector(iop.invokeMember(self.inst, "removeAt", arrayOf(index)))
}

fn insertAt[T](self: Vector[T], index: int, element: T): Vector[T] {
    val args = array[any](2,0)
    args[0] = index
    args[1] = element
    Vector(iop.invokeMember(self.inst, "insertAt", args))
}

fn size[T](self: Vector[T]): int {
    iop.invokeMember(self.inst, "size", array(0,0)) as int
}

fn get[T](self: Vector[T], index: int): Option[T] {
    if (size(self) > index) {
        val jOption = iop.invokeMember(self.inst, "get", arrayOf(index))
        val result = iop.invokeMember(jOption, "get", array(0,0))
        Just(result as T)
    } else {
        Nothing
    }
}

fn getOrElse[T](self: Vector[T], index: int, alternative: T): T {
    val args = arrayOf[any](2,0)
    args[0] = index
    args[1] = alternative
    iop.invokeMember(self.inst, "getOrElse", args) as T
}

fn getOrElse[T](self: Vector[T], index: int, alternative: () -> T): T {
    val args = arrayOf[any](2,0)
    args[0] = index
    args[1] = alternative
    iop.invokeMember(self.inst, "getOrElseGet", args) as T
}

fn map[T, R](self: Vector[T], f: (T) -> R): Vector[R] {
    Vector[R](iop.invokeMember(self.inst, "map", arrayOf(f)))
}

fn forEach[T](self: Vector[T], f: (T) -> unit) {
    map(self, f)
}

fn filter[T](self: Vector[T], f: (T) -> bool): Vector[T] {
    Vector[T](iop.invokeMember(self.inst, "filter", arrayOf(f)))
}

fn filterNot[T](self: Vector[T], f: (T) -> bool): Vector[T] {
    Vector[T](iop.invokeMember(self.inst, "filterNot", arrayOf(f)))
}
