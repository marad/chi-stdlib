package std/lang

import std/io { readString }

pub fn load(filePath: string): any {
    val code = readString(filePath)
    eval(code)
}

data Option[T] = pub Just(pub value: T) | pub Nothing
data Result[T, E] = pub Ok(pub value: T) | pub Err(pub error: E)
data pub Pair[L,R](pub left: L, pub right: R)

pub fn unwrap[T](opt: Option[T]): T {
    (opt as Just).value
}

pub fn or[T](opt: Option[T], other: Option[T]): Option[T] {
    when {
        opt is Just -> opt
        else -> other
    }
}

pub fn map[T,R](option: Option[T], f: (T) -> R): Option[R] {
    when {
        option is Just -> Just(f(option.value))
        else -> Nothing
    }
}


pub fn map[T,E,R](result: Result[T,E], f: (T) -> R): Result[R,E] {
    when {
        result is Ok -> Ok(f(result.value))
        else -> result as Result[R,E]
    }
}
