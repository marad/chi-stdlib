package std/string

pub fn reverse(s: string): string {
  val len = length(s)
  val oldCodePoints = codePoints(s)
  val newCodePoints = array[int](len, 0)
  var index = 0
  while(index < len) {
    newCodePoints[index] = (oldCodePoints[len-index-1])
    index = index + 1
  }
  fromCodePoints(newCodePoints)
}

pub fn isBlank(s: string): bool {
  var blank = true
  val points = s.codePoints()
  var index = 0
  while(index < s.length()) {
    if (!points[index].isWhitespace()) {
      blank = false
      break
    }
    index += 1
  }
  blank
}

pub fn isWhitespace(codePoint: int): bool {
  (28 <= codePoint && codePoint <= 32) || (9 <= codePoint && codePoint <= 14)
}

pub fn isDigit(codePoint: int): bool {
  48 <= codePoint && codePoint <= 57
}

pub fn startsWithDigit(s: string): bool {
  s.codePoints()[0].isDigit()
}


pub fn trim(s: string): string {
  val len = length(s)
  if (len > 0) {
    val points = codePoints(s)
    var start = 0
    var end = len - 1
    while(start < len && isWhitespace(points[start])) {
      start = start + 1
    }
    while(end > 0 && isWhitespace(points[end])) {
      end = end - 1
    }
    val substringLength = (end - start) + 1
    if (substringLength > 0) {
      substring(s, start, substringLength)
    } else {
      ""
    }
  } else {
    s
  }
}


pub fn trimStart(s: string): string {
  val len = length(s)
  if (len > 0) {
    val points = codePoints(s)
    var start = 0
    while(start < len && isWhitespace(points[start])) {
      start = start + 1
    }
    val substringLength = len - start
    if (substringLength > 0) {
      substring(s, start, substringLength)
    } else {
      ""
    }
  } else {
    s
  }
}


pub fn trimEnd(s: string): string {
  val len = length(s)
  if (len > 0) {
    val points = codePoints(s)
    var end = len - 1
    while(end > 0 && isWhitespace(points[end])) {
      end = end - 1
    }
    substring(s, 0, end+1)
  } else {
    s
  }
}


pub fn startsWith(haystack: string, needle: string): bool {
  val haystackLen = length(haystack)
  val needleLen = length(needle)
  if (needleLen <= haystackLen) {
    val haystackPoints = codePoints(haystack)
    val needlePoints = codePoints(needle)
    var index = 0
    var matches = true
    while(index < needleLen) {
      if (haystackPoints[index] != needlePoints[index]) {
        matches = false
      }
      index = index + 1
    }
    matches
  } else {
    false
  }
}


pub fn endsWith(haystack: string, needle: string): bool {
  val haystackLen = length(haystack)
  val needleLen = length(needle)
  if (needleLen <= haystackLen) {
    val haystackPoints = codePoints(haystack)
    val needlePoints = codePoints(needle)
    var haystackIndex = haystackLen - 1
    var needleIndex = needleLen - 1
    var matches = true
    while(needleIndex >= 0) {
      if (haystackPoints[haystackIndex] != needlePoints[needleIndex]) {
        matches = false
      }
      haystackIndex = haystackIndex - 1
      needleIndex = needleIndex - 1
    }
    matches
  } else {
    false
  }
}

pub fn isEmpty(s: string): bool {
  length(s) == 0
}

pub fn isBlank(s: string): bool {
  isEmpty(trim(s))
}

pub fn concat(left: string, right: string): string {
  left + right
}

pub fn indexOf(haystack: string, needle: string): int {
  haystack.indexOf(needle, 0, haystack.length())
}

pub fn contains(haystack: string, needle: string): bool {
  haystack.indexOf(needle) != -1
}

pub fn split(s: string, separator: string): array[string] {
  s.split(separator, -1)
}

pub fn removePrefix(s: string, prefix: string): string {
  if (s.startsWith(prefix)) {
    s.substring(prefix.length(), s.length() - prefix.length())
  } else {
    s
  }
}

pub fn substring(s: string, start: int): string {
  s.substring(start, s.length()-start)
}

pub fn fold[T](s: string, initial: T,  f: (T, string) -> T): T {
  var index = 0
  var result: T = initial
  while(index < s.length()) {
    result = f(result, s[index])
    index += 1
  }
  result
}